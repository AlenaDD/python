# def rec(x):
#     if x<=4:
#         print(x)
#         rec(x+1)
# rec(1)

# находим факториал от числа
# def fact(x):
#     if x==1:
#         return 1
#     return fact(x-1)*x
#
# print(fact(4))

# нахождение чисел Фибоначи
# def fib(n):
#     if n==1:
#         return 0
#     if n == 2:
#         return 1
#     return fib(n-1)+ fib(n-2)
#
# print(fib(8))

#проверяем является ли строка полиндромом
# def polindrom(s):
#     if len(s)<=1:
#         return True
#     if s[0] != s[-1]:
#         return False
#     return polindrom(s[1:-1])
# print(polindrom('шалаш'))

'''Дано натуральное число N и последовательность из N элементов. Требуется вывести эту последовательность в обратном порядке.
Входные данные
Программа принимает на вход натуральное число N (N ≤ 103). 
Во второй строке через пробел идут N целых чисел, по модулю не превосходящих 103 - элементы последовательности.'''
# a = int(input())
# b = list(map(int, input().split()))
# def rec(a):
#     if a > 0:
#         rec(a - 1)
#         print(b[-a], end=" ")
# rec(a)
'''Последовательностью Фибоначчи называется последовательность чисел a0, a1, ..., an, ..., где
a0 = 0, a1 = 1, ak = ak-1 + ak-2 (k > 1).
Требуется найти N-е число Фибоначчи.
Входные данные
Программе поступает на вход целое число N (0 ≤ N ≤ 30) - порядковый номер числа Фибоначчи.
Выходные данные
Вам необходимо вывести на экран N-е число Фибоначчи.'''
# n= int(input())
# def fib(n):
#     if n == 1:
#         return 1
#     if n == 2:
#         return 1
#     return fib(n-1)+fib(n-2)
# print(fib(n))

'''Напишите функцию list_sum_recursive, которая принимает на вход список из целых чисел и возвращает сумму элементов 
переданного списка. Не забывайте, что реализовать это нужно при помощи рекурсии. 
Ваша задача только написать определение функции list_sum_recursive'''
# def list_sum_recursive(args):
#     if len(args) == 1:
#         return args[0]
#     return args[0] + list_sum_recursive(args[1:])

'''Представьте, что у нас есть список целых чисел неограниченной вложенности. То есть наш список может состоять из 
списков, внутри которых также могут быть списки. Ваша задача превратить все это в линейный список при помощи функции
 flatten
flatten([1, [2, 3, [4]], 5]) # вернет [1,2,3,4,5]
flatten([1, [2,3], [[2], 5], 6]) # вернет [1,2,3,2,5,6]
flatten([[[[9]]], [1,2], [[8]]]) # вернет [9,1,2,8]'''
# def flatten(s):
#     if not s:
#         return []
#     if isinstance(s[0], list): #проверяем принадлежность s[0] классу list
#         return flatten(s[0]) + flatten(s[1:])
#     return s[:1] + flatten(s[1:])
#
# print(flatten([1, [2, 3, [4]], 5]))


'''Задача №113656. (информатикс) Расставить скобки
Дана строка, содержащая только английские буквы (большие и маленькие). Добавить открывающиеся и закрывающиеся скобки по
 следующему образцу: "example" -> "(e(x(a(m)p)l)e)" (До середины добавлены открывающиеся скобки, после середины – 
 закрывающиеся. В случае, когда длина строки четна в скобках, расположенных в середине, должно быть 2 символа. 
 ("card -> (c(ar)d", но не "(c(a()r)d)").
Входные данные
Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков.
Выходные данные
Вывести строку, которая получится после добавления скобок.'''
# def bracket(s: str):
#     if len(s)==1 or len(s)==2:
#         return s
#     return s[0] + '(' + bracket(s[1:-1]) + ')' + s[-1]
#
# print(bracket('LItBeoFLcSGBOFQxMHoIuDDWcqcVgkcRoAeocXO'))

'''Функция которая возводит число x  в степень n'''
# def power(x, n):
#     if n == 0:
#         return 1
#     if n <0:
#         return 1/ power(x, -n)
#     if n % 2 == 0:
#         return power(x, n//2) * power(x, n//2)
#     return power(x, n-1)* x
# print(power(3, 10))


# a = [1, 2, [2, 3, 4, [3, 4, [2, 3], 5]]] # вложенность списка
# def rec(spisok, level=1):
#     print(*spisok, 'level=',level)
#     for i in spisok:
#         if isinstance(i, list):
#             rec(i, level+1)
# rec(a)

'''Задача №113655. Вставить звёздочки
Задачи данного блока можно решить с помощью циклов, однако, рекомендуем попробовать решить их с помощью рекурсивных 
функций, для тренировки.
Известно, что любой цикл можно заменить рекурсией.
Дана строка, содержащая только английские буквы (большие и маленькие). Добавить символ ‘*’ (звездочка) между буквами 
(перед первой буквой и после последней символ ‘*’ добавлять не нужно).
Входные данные
Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков.
Выходные данные
Вывести строку, которая получится после добавления символов '*'.'''
# def recc(a):
#     if len(a) == 1:
#         return a
#     return a[0] + '*' + recc(a[1:len(a)])
# print(recc('LItBeoFLcSGBOFQxMHoIuDDWcqcVgkcRoAeocXO'))

'''Задача №113657. Сформировать новую строку со скобками
Задачи данного блока можно решить с помощью циклов, однако, рекомендуем попробовать решить их с помощью рекурсивных 
функций, для тренировки.
Известно, что любой цикл можно заменить рекурсией.
Дана строка, содержащая только английские буквы (большие и маленькие) и открывающиеся скобки. Сформировать новую строку 
добавлением справа «зеркальной» строки с закрывающимися скобками. "(abc(def(g" -> "(abc(def(gg)fed)cba)"
Входные данные
Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков.
Выходные данные
Вывести строку, которая получится после "зеркальной" половины строки.'''
# def glass(a):
#     if len(a)==1:
#         return a + a
#     if a[0] == '(':
#         return a[0] + glass(a[1:len(a)]) + ')'
#     return a[0] + glass(a[1: len(a)]) + a[0]
#
# a = input()
# print(glass(a))
#(((t((p((y((kx((((e(((((((vw((v(e((v(m(((h(mlx((s((((d(y((((((((mtk(d(umi((s((sx(p((m(r((kqo

'''(Время: 1 сек. Память: 16 Мб Сложность: 24%)
Чтобы предсказать судьбу человека, нумеролог берет время жизни человека в секундах, затем складывает все цифры этого 
числа. Если полученное число состоит более чем из одной цифры, операция повторяется, пока в числе не останется одна 
цифра. Затем по полученной цифре и числу операций, необходимых для преобразования числа в цифру нумеролог предсказывает
судьбу человека. Нумеролог плохо умеет считать, а числа, с которыми он работает, могут быть очень большими. Напишите 
программу, которая бы делала все расчеты за него.
Входные данные
Входной файл INPUT.TXT содержит число N – время жизни человека в секундах (1 ≤ N ≤ 101000).
Выходные данные
В выходной файл OUTPUT.TXT выведите два числа через пробел: полученную цифру из числа N и число преобразований'''
# def numerolog(n, count=0, summa =0):
#     if n <= 9:
#         return n, count
#     else:
#         count += 1
#         for i in str(n):
#             summa += int(i)
#         if summa <= 9:
#             return summa, count
#         return(numerolog(summa, count))
#
# print(*numerolog(int(input())))



