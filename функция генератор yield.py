# Функции генераторы - Функции которые могут возвращать одно значение и замораживать свое выполнение
# def genf():
#     for i in [45, 18, 52]:
#         yield i                    # в данном случае вместо return указываем ключевое слово yield
#
# s = genf()
# # print(s)  # s - является генератором, а генератор - это итератор элементы которого можно обойти только один раз и итераторы поддерживают вызов функции next()
# print(next(s))
# print(next(s))
# print(next(s))
# print(next(s))       # выдаст ошибку
#
# # Можем выполнить итерацию по значениям
for i in genf():
    print(i)

# yield замораживает выполнение функции в определенном месте
def genf():
    s = 7
    for i in [45, 18, 52]:
        yield i
        print(s)
        s = s * 10 + 7


g = genf()
print(next(g))
print(next(g))


# где может пригодиться?
# например при обычном поиске факториала для хранения чисел выделяется память и чем больше чисел тем больше памяти нужно
def fact(n):
    pr = 1
    for i in range(1, n+1):
        pr *= i
        yield pr

# по очереди будем выводить факториалы чисел
# s = fact(10)
# print(next(s))
# print(next(s))
# print(next(s))
# print(next(s))

# проще вывести вот так, при этом знрачения не храняться в памяти
for i in fact(10):
    print(i, end= ' ')